# -*- coding: utf-8 -*-
"""MissingLocationsHandle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pddf8j-yqMnM59KNSE_RsTICd01fO7T6
"""
import googlemaps
import pandas as pd
api_key = 'AIzaSyCW3V3R5RVI1H9js7ZKutDvvAD4NHBbgLA'
gmaps = googlemaps.Client(api_key)
df = pd.read_csv('C:\Data Analytics\Sem 3\Dataset\Locations.csv')
df
#Get geocode result object
#Get lat and lon
df['LAT'] = None
df['LON'] = None
for i in range(0,len(df),1):
    geocode_result = gmaps.geocode(df.iat[i,0])
    try:
        lat = geocode_result[0]["geometry"]["location"]["lat"]
        lon = geocode_result[0]["geometry"]["location"]["lng"]
        df.iat[i,df.columns.get_loc("LAT")] = lat
        df.iat[i,df.columns.get_loc("LON")] = lon
    except:
        lat = None
        lon = None
#9549 records take 1 hour 5 minutes to run
#52 missing values will be substituded by default chicago latitude and longitude
df.isna().sum()
#Chicago co-ordinates : 41.8781, 87.6298
#df = df.drop(columns = ['ZipCode'])
values = {'LAT': 41.8781,'LON': -87.6298}
df = df.fillna(value=values)
df.to_csv('C:\Data Analytics\Sem 3\Dataset\LocationsLatLong.csv')
df.head()
newdf = pd.read_csv('C:\Data Analytics\Sem 3\Dataset\LocationsLatLong.csv',index_col=False)
newdf = newdf.drop(columns=['Unnamed: 0'])
#Get geocode result object
#Get lat and lon
newdf['ZipCode'] = None
for i in range(0,len(newdf),1):
    re = gmaps.reverse_geocode((newdf.iat[i,1],newdf.iat[i,2]))
    try:
        for x in re[0]['address_components']:
            if 'postal_code' in x['types']:
                add = x['long_name']
                newdf.iat[i,newdf.columns.get_loc("ZipCode")] = add      
    except:
        add = None
#9549 records take 15 minutes to run
newdf[newdf['ZipCode'].isnull()]
newdf = newdf.fillna(60601) #119 zipcdes filled with default chicago zipcode
newdf.isna().sum()
newdf.to_csv('C:\Data Analytics\Sem 3\Dataset\LocationsZip.csv')

#Speed Camera & Red Camera Violations data locations
sviolations = pd.read_csv('C:/Data Analytics/Sem 3/Dataset/LocationData/Speed_CameraViolations.csv')
rviolations = pd.read_csv('C:/Data Analytics/Sem 3/Dataset/LocationData/Red_Light_Camera_Violations.csv')

slocs = sviolations[['ADDRESS','LATITUDE','LONGITUDE']]
rlocs = rviolations[['ADDRESS','LATITUDE','LONGITUDE']]
slocs = pd.DataFrame(slocs)
rlocs = pd.DataFrame(rlocs)

print(slocs.shape)
print(rlocs.shape)



nullslocs = slocs[pd.isnull(slocs).any(axis=1)]
nullslocs.shape

nullrlocs = rlocs[pd.isnull(rlocs).any(axis=1)]
nullrlocs.shape

nullrlocs = nullrlocs.drop_duplicates(subset='ADDRESS') #17 unique addresses only
nullslocs = nullslocs.drop_duplicates(subset='ADDRESS') #5 unique address only

nullrlocs = nullrlocs.drop(columns=['LATITUDE','LONGITUDE']) 
nullslocs = nullslocs.drop(columns=['LATITUDE','LONGITUDE'])
#Get geocode result object
#Get lat and lon for red camera
nullrlocs['LAT'] = None
nullrlocs['LON'] = None

for i in range(0,len(nullrlocs),1):
    geocode_result = gmaps.geocode(nullrlocs.iat[i,0])
    try:
        lat = geocode_result[0]["geometry"]["location"]["lat"]
        lon = geocode_result[0]["geometry"]["location"]["lng"]
        nullrlocs.iat[i,nullrlocs.columns.get_loc("LAT")] = lat
        nullrlocs.iat[i,nullrlocs.columns.get_loc("LON")] = lon
    except:
        lat = None
        lon = None

#Get geocode result object
#Get lat and lon for speed camera
nullslocs['LAT'] = None
nullslocs['LON'] = None

for i in range(0,len(nullslocs),1):
    geocode_result = gmaps.geocode(nullslocs.iat[i,0])
    try:
        lat = geocode_result[0]["geometry"]["location"]["lat"]
        lon = geocode_result[0]["geometry"]["location"]["lng"]
        nullslocs.iat[i,nullslocs.columns.get_loc("LAT")] = lat
        nullslocs.iat[i,nullslocs.columns.get_loc("LON")] = lon
    except:
        lat = None
        lon = None

nullslocs

nullrlocs = nullrlocs.rename(columns={'LAT':'LATITUDE','LON':'LONGITUDE'})
nullslocs = nullslocs.rename(columns={'LAT':'LATITUDE','LON':'LONGITUDE'})

nullslocs

speedmislocs = slocs[pd.isnull(slocs).any(axis=1)]
redmislocs = rlocs[pd.isnull(rlocs).any(axis=1)]

#Lookup for latitude
sviolations.loc[sviolations['LATITUDE'].isna(),'LATITUDE'] = sviolations['ADDRESS'].map(nullslocs.LATITUDE)

#Lookup for longitude
sviolations.loc[sviolations['LONGITUDE'].isna(),'LONGITUDE'] = sviolations['ADDRESS'].map(nullslocs.LONGITUDE)

#Lookup for latitude
rviolations.loc[rviolations['LATITUDE'].isna(),'LATITUDE'] = rviolations['ADDRESS'].map(nullrlocs.LATITUDE)

#Lookup for longitude
rviolations.loc[rviolations['LONGITUDE'].isna(),'LONGITUDE'] = rviolations['ADDRESS'].map(nullrlocs.LONGITUDE)

#Fill missing latitude
s1 = nullrlocs.set_index('ADDRESS')['LATITUDE']
rviolations['LATITUDE'] = rviolations['LATITUDE'].fillna(rviolations['ADDRESS'].map(s1))

#Fill missing longitude
s2 = nullrlocs.set_index('ADDRESS')['LONGITUDE']
rviolations['LONGITUDE'] = rviolations['LONGITUDE'].fillna(rviolations['ADDRESS'].map(s2))

#Fill missing latitude
s3 = nullslocs.set_index('ADDRESS')['LATITUDE']
sviolations['LATITUDE'] = sviolations['LATITUDE'].fillna(sviolations['ADDRESS'].map(s3))

#Fill missing longitude
s4 = nullslocs.set_index('ADDRESS')['LONGITUDE']
sviolations['LONGITUDE'] = sviolations['LONGITUDE'].fillna(sviolations['ADDRESS'].map(s4))

sviolations.isna().sum()

rviolations.isna().sum()

sv = sviolations[['VIOLATION DATE','LATITUDE','LONGITUDE']]
rv = rviolations[['VIOLATION DATE','LATITUDE','LONGITUDE']]

sv.to_csv('C:/Data Analytics/Sem 3/Dataset/LocationData/SpeedCam_Clean.csv')
rv.to_csv('C:/Data Analytics/Sem 3/Dataset/LocationData/RedCam_Clean.csv')

sv.shape

rv.shape